#!/usr/bin/env php
<?php

declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';

use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Sokil\IdBench\Database\DatabaseInterface;
use Sokil\IdBench\Benchmark\BenchmarkInterface;
use Symfony\Component\Console\Helper\ProgressBar;
use Sokil\IdBench\Database\Mysql;
use Sokil\IdBench\Database\Postgres;
use Sokil\IdBench\Database\Mongodb;
use Sokil\IdBench\Benchmark\InsertPrimaryAutoIncrementBenchmark;
use Sokil\IdBench\Benchmark\InsertPrimaryUuidv1Benchmark;
use Sokil\IdBench\Benchmark\InsertPrimaryUuidv2Benchmark;
use Sokil\IdBench\Benchmark\InsertPrimaryUuidv3Benchmark;
use Sokil\IdBench\Benchmark\InsertPrimaryUuidv4Benchmark;
use Sokil\IdBench\Benchmark\InsertPrimaryUuidv5Benchmark;
use Sokil\IdBench\Benchmark\InsertPrimaryUuidv6Benchmark;
use Sokil\IdBench\Benchmark\InsertPrimaryUuidv7Benchmark;
use Sokil\IdBench\Benchmark\InsertPrimaryUuidv8Benchmark;
use Sokil\IdBench\Benchmark\InsertSecondaryUuidv4Benchmark;
use Sokil\IdBench\Benchmark\InsertSecondaryUuidv7Benchmark;

$databaseClasses = [
    'mysql' => Mysql::class,
    'percona' => Mysql::class,
    'mariadb' => Mysql::class,
    'postgres' => Postgres::class,
    'mongodb' => Mongodb::class,
];

$benchmarkClasses = [
    'insertPrimaryAutoIncrement' => InsertPrimaryAutoIncrementBenchmark::class,
    'insertPrimaryUuidv1' => InsertPrimaryUuidv1Benchmark::class,
    'insertPrimaryUuidv2' => InsertPrimaryUuidv2Benchmark::class,
    'insertPrimaryUuidv3' => InsertPrimaryUuidv3Benchmark::class,
    'insertPrimaryUuidv4' => InsertPrimaryUuidv4Benchmark::class,
    'insertPrimaryUuidv5' => InsertPrimaryUuidv5Benchmark::class,
    'insertPrimaryUuidv6' => InsertPrimaryUuidv6Benchmark::class,
    'insertPrimaryUuidv7' => InsertPrimaryUuidv7Benchmark::class,
    'insertPrimaryUuidv8' => InsertPrimaryUuidv8Benchmark::class,
    'insertSecondaryUuidv4' => InsertSecondaryUuidv4Benchmark::class,
    'insertSecondaryUuidv7' => InsertSecondaryUuidv7Benchmark::class,
];

$application = new SingleCommandApplication();
$application
    ->addArgument(
        'database',
        InputArgument::REQUIRED,
        sprintf('One of databases "%s"', implode('", "', array_keys($databaseClasses)))
    )
    ->addArgument(
        'benchmark',
        InputArgument::REQUIRED,
        sprintf('One of benchmarks "%s"', implode('", "', array_keys($benchmarkClasses)))
    )
    ->addOption(
        'iterations',
        'i',
        InputOption::VALUE_OPTIONAL,
        'Count of iterations to perform',
        10
    )
    ->addOption(
        'batchSize',
        'b',
        InputOption::VALUE_OPTIONAL,
        'Count of iterations to perform',
        1000
    )
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($databaseClasses, $benchmarkClasses) {
        $databaseName = $input->getArgument('database');
        $benchmarkName = $input->getArgument('benchmark');
        $iterations = (int) $input->getOption('iterations');
        $batchSize = (int) $input->getOption('batchSize');

        // locate database class
        $databaseClass = $databaseClasses[$databaseName] ?? null;
        if (empty($databaseClass)) {
            throw new \InvalidArgumentException(sprintf('Database "%s" not supported', $databaseName));
        }

        // get connection DSN
        $connectionDSN = getenv(strtoupper($databaseName) . '_CONNECTION_DSN');

        // build database
        /** @var DatabaseInterface $database */
        $database = new $databaseClass($connectionDSN);

        // build benchmark
        $benchmarkClass = $benchmarkClasses[$benchmarkName] ?? null;
        if (empty($benchmarkClass)) {
            throw new \InvalidArgumentException(sprintf('Benchmark %s not found', $benchmarkName));
        }

        /** @var BenchmarkInterface $benchmark */
        $benchmark = new $benchmarkClass(
            $database
        );

        // create benchmark generator
        $generator = $benchmark->createGenerator(
            $iterations,
            $batchSize,
        );

        // create progress bar
        $progressBar = new ProgressBar($output, $iterations);

        // show results
        $resultFilename = $databaseName . '-' . $benchmarkName . '.csv';
        $resultFile = fopen(__DIR__ . '/../results/' . $resultFilename, 'w+');
        foreach ($generator as $resultRow) {
            pcntl_signal_dispatch();

            fputcsv(
                $resultFile,
                [
                    (1 + $resultRow['iteration']) * $batchSize,
                    $resultRow['duration'],
                    $resultRow['indexSize']
                ],
                "\t"
            );

            $progressBar->advance();
        }

        // free resources
        fclose($resultFile);
        $progressBar->finish();

        $output->writeln("");
    })
    ->run();